akka {
  log-config-on-start = true
  actor {
    default-dispatcher {
      # This will be used if you have set "executor = "fork-join-executor""
      fork-join-executor {
        parallelism-min = 8
        parallelism-factor = 3.0
        parallelism-max = 64
        task-peeking-mode = "FIFO"
      }

    db-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"
      thread-pool-executor {
        core-pool-size-min = 2
        core-pool-size-factor = 2.0
        core-pool-size-max = 10
      }
      # Throughput defines the maximum number of messages to be
      # processed per actor before the thread jumps to the next actor.
      throughput = 100
    }



    }

    deployment {
      /legacy-transaction-service {
        dispatcher = db-dispatcher
      }
    }

  }
    #actor {
    #  default-dispatcher = {
    #    type = "controllers.MDCPropagatingDispatcherConfigurator"
    #  }
    #}
}

play.crypto.secret = "V8BKs?r9GIExAa?5B9Rjf@UzPN7N9p7zStJ;OS;Rf6@ur<=L:UFhe>1bUNeMkESR"

play.modules {
}

play.i18n {
  langs = [ "en" ]
}

play.http {
  ## Router
  # https://www.playframework.com/documentation/latest/JavaRouting
  # https://www.playframework.com/documentation/latest/ScalaRouting
  # ~~~~~
  # Define the Router object to use for this application.
  # This router will be looked up first when the application is starting up,
  # so make sure this is the entry point.
  # Furthermore, it's assumed your route file is named properly.
  # So for an application router like `my.application.Router`,
  # you may need to define a router file `conf/my.application.routes`.
  # Default to Routes in the root package (aka "apps" folder) (and conf/routes)
  #router = my.application.Router
  session {
  }

  flash {
  }
}

play.server.netty {
}

play.ws {
  ssl {
    # Configuring HTTPS with Play WS does not require programming.  You can
    # set up both trustManager and keyManager for mutual authentication, and
    # turn on JSSE debugging in development with a reload.
    #debug.handshake = true
    #trustManager = {
    #  stores = [
    #    { type = "JKS", path = "exampletrust.jks" }
    #  ]
    #}
  }
}

## Cache
# https://www.playframework.com/documentation/latest/ScalaCache
# Play comes with an integrated cache API that can reduce the operational
# overhead of repeated requests. You must enable this by adding to build.sbt:
# libraryDependencies += cache
play.cache {
  # If you want to bind several caches, you can bind the individually
  #bindCaches = ["db-cache", "user-cache", "session-cache"]
}

play.filters {
  cors {
  }

  csrf {
  }

  headers {
  }

  hosts {
  }
}

play.evolutions {
}

play.db {
  config = "db"
  default = "default"

  prototype {
    hikaricp.minimumIdle = 50
    hikaricp.maximumPoolSize = 50
    hikaricp.leakDetectionThreshold = 2000
  }
}

# https://www.playframework.com/documentation/latest/ScalaDatabase
db {
  default.driver = com.mysql.jdbc.Driver
  # Replica example: jdbc:mysql:replication://mysql-master:3306,mysql-slave:3306/sps433
  default.url = "jdbc:mysql://localhost:3306/sps433"
  default.url = ${?MYSQL_CONNECTION_URL}

  default.username = "spsT_usr"
  default.username = ${?MYSQL_USER}

  default.password = "veef8Eed"
  default.password = ${?MYSQL_PASS}

  default.logSql=true
}

redis {
	host="localhost"
	port="6379"
	host=${?REDIS_HOST}
	port=${?REDIS_PORT}

    readTimeout=3000
    readTimeout=${?REDIS_READ_TIMEOUT}
    writeTimeout=3000
    writeTimeout=${?REDIS_WRITE_TIMEOUT}
    poolSize=100
    poolSize=${?REDIS_POOL_SIZE}
    watcherUrl=${?REDIS_WATCHER_URL}
}

replication {
  batch {
    maxSize=100
    delay=800
    maxSize=${?REPLICATION_BATCH_MAX_SIZE}
    delay=${?REPLICATION_BATCH_DELAY}
  }
}
sps {

  coretx {
    operation{
      ttlseconds=900
      ttlseconds=${?OPERATION_TTL_SECONDS}
    }
  }
  
  encryption {
  	key=b8c2ca4a7baed8e334dc49c01c7ea22d016f83bf66b288333a163233ed46565e
	key=${?LEGACY_ENCRYPTION_KEY}

    keyndx=17
    keyndx=${?LEGACY_ENCRYPTION_KEY_INDEX}
  }

  protocols {

    visa {
      id=[7,18]
      url="http://localhost:9030"
      url=${?PROTOCOL_VISA}
      timeoutMillis=7000
      timeoutMillis=${?PROTOCOL_VISA_TIMEOUT_MILLIS}
      reversalsTopic="visaReversalsTopic"
    }

    mastercard {
      id=[8]
      url="http://localhost:9031"
      url=${?PROTOCOL_MASTERCARD}
      timeoutMillis=7000
      timeoutMillis=${?PROTOCOL_MASTERCARD_TIMEOUT_MILLIS}
      reversalsTopic="mastercardReversalsTopic"
    }

    pmc {
      id=[21]
      url="http://localhost:9032"
      url=${?PROTOCOL_PMC}
      timeoutMillis=7000
      timeoutMillis=${?PROTOCOL_PMC_TIMEOUT_MILLIS}
      reversalsTopic="pmcReversalsTopic"
    }

  }

  cybersource {
    url="https://ics2wstest.ic3.com:443/commerce/1.x/transactionProcessor"
    url=${?CYBERSOURCE_URL}
    timeoutMillis=7000
    timeoutMillis=${?CYBERSOURCE_TIMEOUT_MILLIS}
    postback= {
   	  timeoutMillis=10000
      timeoutMillis=${?CYBERSOURCE_PPB_TIMEOUT_MILLIS}
    }
  }

  kafka {
     bootstrapServers = "localhost:9092"
     bootstrapServers=${?KAFKA_BOOTSTRAP_SERVERS}
  }

  terminales {

    ghostCollector {

      pollPeriodMillis=5000
      pollPeriodMillis=${?TERMINALES_POLL_PERIOD_MILLIS}
      timeoutMillis=78000
      timeoutMillis=${?TERMINALES_TIMEOUT_MILLIS}

    }

  }

  agro {
    url="http://localhost:10117/validateToken/"
    url=${?AGRO_TOKEN_VALIDATOR_URL}
    timeoutMillis=5000
    timeoutMillis=${?AGRO_TOKEN_VALIDATOR_TIMEOUT_MILLIS}
  }

  tokenization {
    url="http://localhost:9003"
    url=${?TOKENIZATION_URL}
    timeoutMillis=5000
    timeoutMillis=${?TOKENIZATION_TIMEOUT_MILLIS}
  }

  allow-persist=false
  allow-persist=${?CORETX_ALLOW_PERSIST}
}

kamon {
  metric {
    tick-interval = 10 second
  }

  play {
    include-trace-token-header = true
    trace-token-header-name = "X-Trace-Token"
  }

  metric {
    filters {
      trace.includes = [ "**" ]
      akka-actor.includes = [ "**" ]
      akka-dispatcher.includes = [ "**" ]
      akka-dispatcher.router = [ "**" ]
    }
  }

  modules {
    kamon-log-reporter.auto-start = no
  }

   influxdb {
     application-name: "coretx"
     hostname = "localhost"
     hostname = ${?INFLUX_HOSTNAME}
     port = 8086
     port = ${?INFLUX_PORT}
     subscriptions {
       histogram       = [ "**" ]
       min-max-counter = [ "**" ]
       gauge           = [ "**" ]
       counter         = [ "**" ]
       trace           = [ "**" ]
       trace-segment   = [ "**" ]
       akka-actor      = [ "**" ]
       akka-dispatcher = [ "**" ]
       akka-router     = [ "**" ]
       system-metric   = [ "**" ]
       http-server     = [ "**" ]
     }
   }
}

liquibase {
    url = "jdbc:mysql://localhost:3306/sps433"
    url = ${?MYSQL_CONNECTION_URL}
    
    driver   = "com.mysql.jdbc.Driver"
    
    user = "spsT_usr"
  	user = ${?MYSQL_USER}

  	password = "veef8Eed"
  	password = ${?MYSQL_PASS}
}

lock {
  refunds {
    ttl = 3600
    ttl = ${?LOCK_REFUNDS_TTL}
    allowed = false
    allowed = ${?LOCK_REFUNDS_ALLOWED}
  }
}

include "environment.conf"
